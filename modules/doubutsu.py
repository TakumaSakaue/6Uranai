"""
どうぶつ占いモジュール
"""

# --- データ定義 ---
# 注意: このデータは提供された画像に基づいた一部であり、完全ではありません。
#       全ての年をカバーするには、完全なデータセットまたは計算ロジックが必要です。
_base_numbers = {
    # 1970-1999 (画像1より)
    1970: {1: 17, 2: 48, 3: 16, 4: 47, 5: 17, 6: 48, 7: 18, 8: 49, 9: 20, 10: 50, 11: 21, 12: 51},
    1971: {1: 22, 2: 53, 3: 21, 4: 52, 5: 22, 6: 53, 7: 23, 8: 54, 9: 25, 10: 55, 11: 26, 12: 56},
    1972: {1: 27, 2: 58, 3: 27, 4: 58, 5: 28, 6: 59, 7: 29, 8: 60, 9: 31, 10: 1, 11: 32, 12: 2},
    1973: {1: 33, 2: 4, 3: 32, 4: 3, 5: 33, 6: 4, 7: 34, 8: 5, 9: 36, 10: 6, 11: 37, 12: 7},
    1974: {1: 38, 2: 9, 3: 37, 4: 8, 5: 38, 6: 9, 7: 39, 8: 10, 9: 41, 10: 11, 11: 42, 12: 12},
    1975: {1: 43, 2: 14, 3: 42, 4: 13, 5: 43, 6: 14, 7: 44, 8: 15, 9: 46, 10: 16, 11: 47, 12: 17},
    1976: {1: 48, 2: 19, 3: 48, 4: 19, 5: 49, 6: 20, 7: 50, 8: 21, 9: 52, 10: 22, 11: 53, 12: 23},
    1977: {1: 54, 2: 25, 3: 53, 4: 24, 5: 54, 6: 25, 7: 55, 8: 26, 9: 57, 10: 27, 11: 58, 12: 28},
    1978: {1: 59, 2: 30, 3: 58, 4: 29, 5: 59, 6: 30, 7: 60, 8: 31, 9: 2, 10: 32, 11: 3, 12: 33},
    1979: {1: 4, 2: 35, 3: 3, 4: 34, 5: 4, 6: 35, 7: 5, 8: 36, 9: 7, 10: 37, 11: 8, 12: 38},
    1980: {1: 9, 2: 40, 3: 9, 4: 40, 5: 10, 6: 41, 7: 11, 8: 42, 9: 13, 10: 43, 11: 14, 12: 44},
    1981: {1: 15, 2: 46, 3: 14, 4: 45, 5: 15, 6: 46, 7: 16, 8: 47, 9: 18, 10: 48, 11: 19, 12: 49},
    1982: {1: 20, 2: 51, 3: 19, 4: 50, 5: 20, 6: 51, 7: 21, 8: 52, 9: 23, 10: 53, 11: 24, 12: 54},
    1983: {1: 25, 2: 56, 3: 24, 4: 55, 5: 25, 6: 56, 7: 26, 8: 57, 9: 28, 10: 58, 11: 29, 12: 59},
    1984: {1: 30, 2: 1, 3: 30, 4: 1, 5: 31, 6: 2, 7: 32, 8: 3, 9: 34, 10: 4, 11: 35, 12: 5},
    1985: {1: 36, 2: 7, 3: 35, 4: 6, 5: 36, 6: 7, 7: 37, 8: 8, 9: 39, 10: 9, 11: 40, 12: 10},
    1986: {1: 41, 2: 12, 3: 40, 4: 11, 5: 41, 6: 12, 7: 42, 8: 13, 9: 44, 10: 14, 11: 45, 12: 15},
    1987: {1: 46, 2: 17, 3: 45, 4: 16, 5: 46, 6: 17, 7: 47, 8: 18, 9: 49, 10: 19, 11: 50, 12: 20},
    1988: {1: 51, 2: 22, 3: 51, 4: 22, 5: 52, 6: 23, 7: 53, 8: 24, 9: 55, 10: 25, 11: 56, 12: 26},
    1989: {1: 57, 2: 28, 3: 56, 4: 27, 5: 57, 6: 28, 7: 58, 8: 29, 9: 60, 10: 30, 11: 1, 12: 31},
    1990: {1: 2, 2: 33, 3: 1, 4: 32, 5: 2, 6: 33, 7: 3, 8: 34, 9: 5, 10: 35, 11: 6, 12: 36},
    1991: {1: 7, 2: 38, 3: 6, 4: 37, 5: 7, 6: 38, 7: 8, 8: 39, 9: 10, 10: 40, 11: 11, 12: 41},
    1992: {1: 12, 2: 43, 3: 12, 4: 43, 5: 13, 6: 44, 7: 14, 8: 45, 9: 16, 10: 46, 11: 17, 12: 47},
    1993: {1: 18, 2: 49, 3: 17, 4: 48, 5: 18, 6: 49, 7: 19, 8: 50, 9: 21, 10: 51, 11: 22, 12: 52},
    1994: {1: 23, 2: 54, 3: 22, 4: 53, 5: 23, 6: 54, 7: 24, 8: 55, 9: 26, 10: 56, 11: 27, 12: 57},
    1995: {1: 28, 2: 59, 3: 27, 4: 58, 5: 28, 6: 59, 7: 29, 8: 60, 9: 31, 10: 1, 11: 32, 12: 2},
    1996: {1: 33, 2: 4, 3: 33, 4: 4, 5: 34, 6: 5, 7: 35, 8: 6, 9: 37, 10: 7, 11: 38, 12: 8},
    1997: {1: 39, 2: 10, 3: 38, 4: 9, 5: 39, 6: 10, 7: 40, 8: 11, 9: 42, 10: 12, 11: 43, 12: 13},
    1998: {1: 44, 2: 15, 3: 43, 4: 14, 5: 44, 6: 15, 7: 45, 8: 16, 9: 47, 10: 17, 11: 48, 12: 18},
    1999: {1: 49, 2: 20, 3: 48, 4: 19, 5: 49, 6: 20, 7: 50, 8: 21, 9: 52, 10: 22, 11: 53, 12: 23},
    # 2000-2015 (画像2, 3より)
    2000: {1: 54, 2: 25, 3: 54, 4: 25, 5: 55, 6: 26, 7: 56, 8: 27, 9: 58, 10: 28, 11: 59, 12: 29},
    2001: {1: 60, 2: 31, 3: 59, 4: 30, 5: 60, 6: 31, 7: 1, 8: 32, 9: 3, 10: 33, 11: 4, 12: 34},
    2002: {1: 5, 2: 36, 3: 4, 4: 35, 5: 5, 6: 36, 7: 6, 8: 37, 9: 8, 10: 38, 11: 9, 12: 39},
    2003: {1: 10, 2: 41, 3: 9, 4: 40, 5: 10, 6: 41, 7: 11, 8: 42, 9: 13, 10: 43, 11: 14, 12: 44},
    2004: {1: 15, 2: 46, 3: 15, 4: 46, 5: 16, 6: 47, 7: 17, 8: 48, 9: 19, 10: 49, 11: 20, 12: 50},
    2005: {1: 21, 2: 52, 3: 20, 4: 51, 5: 21, 6: 52, 7: 22, 8: 53, 9: 24, 10: 54, 11: 25, 12: 55},
    2006: {1: 26, 2: 57, 3: 25, 4: 56, 5: 26, 6: 57, 7: 27, 8: 58, 9: 29, 10: 59, 11: 30, 12: 60},
    2007: {1: 31, 2: 2, 3: 30, 4: 1, 5: 31, 6: 2, 7: 32, 8: 3, 9: 34, 10: 4, 11: 35, 12: 5},
    2008: {1: 36, 2: 7, 3: 36, 4: 7, 5: 37, 6: 8, 7: 38, 8: 9, 9: 40, 10: 10, 11: 41, 12: 11},
    2009: {1: 42, 2: 13, 3: 41, 4: 12, 5: 42, 6: 13, 7: 43, 8: 14, 9: 45, 10: 15, 11: 46, 12: 16},
    2010: {1: 47, 2: 18, 3: 46, 4: 17, 5: 47, 6: 18, 7: 48, 8: 19, 9: 50, 10: 20, 11: 51, 12: 21},
    2011: {1: 52, 2: 23, 3: 51, 4: 22, 5: 52, 6: 23, 7: 53, 8: 24, 9: 55, 10: 25, 11: 56, 12: 26},
    2012: {1: 57, 2: 28, 3: 56, 4: 27, 5: 57, 6: 28, 7: 58, 8: 29, 9: 60, 10: 30, 11: 1, 12: 31},
    2013: {1: 3, 2: 34, 3: 2, 4: 33, 5: 3, 6: 34, 7: 4, 8: 35, 9: 6, 10: 36, 11: 7, 12: 37},
    2014: {1: 8, 2: 39, 3: 7, 4: 38, 5: 8, 6: 39, 7: 9, 8: 40, 9: 11, 10: 41, 11: 12, 12: 42},
    2015: {1: 13, 2: 44, 3: 12, 4: 43, 5: 13, 6: 44, 7: 14, 8: 45, 9: 16, 10: 46, 11: 17, 12: 47},
}

_animal_characters = {
    1: "長距離ランナーのチーター", 2: "社交家のたぬき", 3: "落ち着きのない猿",
    4: "フットワークの軽いコアラ", 5: "面倒見のいい黒ヒョウ", 6: "愛情あふれるトラ",
    7: "全力疾走するチーター", 8: "磨き上げられたたぬき", 9: "大きな志を持った猿",
    10: "母性豊かなコアラ", 11: "正直なこじか", 12: "人気者のゾウ",
    13: "根が明るい狼", 14: "協調性のないひつじ", 15: "どっしりとした猿",
    16: "コアラの中のコアラ", 17: "強い意志をもったこじか", 18: "デリケートなゾウ",
    19: "放浪のオオカミ", 20: "物静かなひつじ", 21: "落ち着きのあるペガサス",
    22: "強靭な翼を持つペガサス", 23: "無邪気なひつじ", 24: "クリエイティブなオオカミ",
    25: "穏やかなオオカミ", 26: "粘り強いひつじ", 27: "波乱に満ちたペガサス",
    28: "優雅なペガサス", 29: "チャレンジ精神旺盛なひつじ", 30: "順応性のあるオオカミ",
    31: "リーダーとなるゾウ", 32: "しっかり者のこじか", 33: "活動的なコアラ",
    34: "気分野の猿", 35: "頼られると嬉しいひつじ", 36: "好感持たれるオオカミ",
    37: "まっしぐらに突き進むゾウ", 38: "華やかなこじか", 39: "夢とロマンのコアラ",
    40: "尽くす猿", 41: "大器晩成のたぬき", 42: "足腰の強いチーター",
    43: "動き回るトラ", 44: "情熱的な黒ヒョウ", 45: "サービス精神旺盛なコアラ",
    46: "守りの猿", 47: "人間味あふれるたぬき", 48: "品格のあるチーター",
    49: "ゆったりとした悠然のトラ", 50: "落ち込みの激しい黒ヒョウ",
    51: "我が道を行くライオン", 52: "統率力のあるライオン", 53: "感情豊かな黒ヒョウ",
    54: "楽天的なトラ", 55: "パワフルなトラ", 56: "気取らない黒ヒョウ",
    57: "感情的なライオン", 58: "傷つきやすいライオン", 59: "束縛を嫌う黒ヒョウ",
    60: "慈悲深いトラ"
}

# --- ヘルパー関数 ---
def _get_base_number(year, month):
    """年と月から基礎ナンバーを取得する"""
    if year in _base_numbers and month in _base_numbers[year]:
        base_num = _base_numbers[year][month]
        # 元データで0の場合は60として扱う
        if base_num == 0:
            return 60
        return base_num
    else:
        # データがない年はNoneを返す
        return None

def _get_animal_character(magic_number):
    """マジックナンバーから動物キャラクターを取得する"""
    return _animal_characters.get(magic_number, "不明な動物")

# --- APIから呼び出すメイン関数 ---
def calculate_animal_fortune(birth_year, birth_month, birth_day):
    """
    生年月日からどうぶつ占いのキャラクターを計算する関数

    Args:
        birth_year (int): 生まれた年（西暦）
        birth_month (int): 生まれた月（1～12）
        birth_day (int): 生まれた日（1～31）

    Returns:
        dict: {"animal": 動物名, "fortune": 運勢, "description": 説明} or None (エラーまたはデータ不足時)
    """
    try:
        # 入力値の検証
        if not isinstance(birth_year, int) or not isinstance(birth_month, int) or not isinstance(birth_day, int):
            raise ValueError("生年月日は整数で入力してください")
        
        if birth_month < 1 or birth_month > 12:
            raise ValueError("月は1から12の範囲で入力してください")
            
        if birth_day < 1 or birth_day > 31:
            raise ValueError("日は1から31の範囲で入力してください")
            
        # 月によっては日数が30日までの場合があります
        if birth_month in [4, 6, 9, 11] and birth_day > 30:
            raise ValueError(f"{birth_month}月は30日までしかありません")
            
        # 2月は28日または29日（閏年）まで
        if birth_month == 2:
            is_leap_year = (birth_year % 4 == 0 and birth_year % 100 != 0) or (birth_year % 400 == 0)
            max_days = 29 if is_leap_year else 28
            if birth_day > max_days:
                raise ValueError(f"{birth_year}年の2月は{max_days}日までしかありません")

        # Step 1: 基礎ナンバーを取得
        base_number = _get_base_number(birth_year, birth_month)

        # 基礎ナンバーが見つからない場合 (データ不足)
        if base_number is None:
            return {
                "animal": "データ不足",
                "fortune": f"{birth_year}年のデータがありません",
                "description": "1970年から2015年までの生年月日を入力してください"
            }

        # Step 2: 生まれた日を足してマジックナンバーを計算
        magic_number = base_number + birth_day

        # Step 3: 60を超えたら60で割った余り、余りが0なら60
        if magic_number > 60:
            magic_number = magic_number % 60
            if magic_number == 0:
                magic_number = 60

        # Step 4: マジックナンバーから動物キャラクターを取得
        animal = _get_animal_character(magic_number)

        if animal == "不明な動物":
            return {
                "animal": "計算エラー",
                "fortune": "動物キャラクターの取得に失敗しました",
                "description": f"マジックナンバー {magic_number} に対応する動物が見つかりません"
            }

        return {
            "animal": animal,
            "fortune": f"あなたは{animal}タイプです",
            "description": f"マジックナンバー{magic_number}から導き出された、あなたの個性を表す動物です"
        }

    except Exception as e:
        print(f"どうぶつ占い計算エラー: {e}")
        return {
            "animal": "エラー",
            "fortune": "計算に失敗しました",
            "description": str(e)
        }

# --- 単体テスト用のコード ---
if __name__ == '__main__':
    # データが存在する例
    year, month, day = 2000, 10, 28
    result = calculate_animal_fortune(year, month, day)
    if result:
        print(f"{year}年{month}月{day}日生まれ")
        print(f"  どうぶつ占い: {result['animal']}") # 28 + 28 = 56 -> 気取らない黒ヒョウ
    else:
        print(f"{year}年{month}月{day}日: 計算失敗またはデータ不足")

    year, month, day = 1972, 8, 10
    result = calculate_animal_fortune(year, month, day)
    if result:
        print(f"{year}年{month}月{day}日生まれ")
        print(f"  どうぶつ占い: {result['animal']}") # 0 + 10 = 10 -> 母性豊かなコアラ (もし0が60なら 60+10=70 -> 10)
    else:
        print(f"{year}年{month}月{day}日: 計算失敗またはデータ不足")


    # データが存在しない年の例
    year, month, day = 1969, 1, 1
    result = calculate_animal_fortune(year, month, day)
    if result:
        print(f"{year}年{month}月{day}日生まれ")
        print(f"  どうぶつ占い: {result['animal']}")
    else:
        print(f"{year}年{month}月{day}日: 計算失敗またはデータ不足") 